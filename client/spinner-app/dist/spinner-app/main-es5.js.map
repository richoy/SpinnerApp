{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing/app-routing.module.ts","webpack:///src/app/app-routing/routes.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/custom-script/custom-script.component.ts","webpack:///src/app/custom-script/custom-script.component.html","webpack:///src/app/customize-spinner/customize-spinner.component.ts","webpack:///src/app/customize-spinner/customize-spinner.component.html","webpack:///src/app/email-list/email-list.component.ts","webpack:///src/app/email-list/email-list.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/services/emails.service.ts","webpack:///src/app/services/image.service.ts","webpack:///src/app/services/process-httpmsg.service.ts","webpack:///src/app/services/spinner-customizer-controller.service.ts","webpack:///src/app/services/spinner.service.ts","webpack:///src/app/shared/ImageSnippet.ts","webpack:///src/app/shared/form-spinner-controller.ts","webpack:///src/app/spinner/spinner.component.ts","webpack:///src/app/spinner/spinner.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppRoutingModule","forRoot","declarations","imports","routes","path","component","redirectTo","pathMatch","AppComponent","title","selector","templateUrl","styleUrls","AppModule","providers","bootstrap","CustomScriptComponent","isMenuCollapsed","CustomizeSpinnerComponent","formBuilder","spinnerService","imageService","items","submitPressed","itIsImageFile","itIsTextField","itIsTextPopUp","itIsEmailPopUp","StringOfImageUpload","SuccessfullyUpload","UnsuccessfullyUpload","spinnerForm","group","spinnerArray","array","required","i","addControl","length","isItImage","file","textFieldOne","percentage","pattern","isItEmail","textPopUp","emails","color","index","push","UploadFile","image","files","srcElement","reader","FileReader","addEventListener","event","selectedFile","target","result","uploadImage","subscribe","res","onSuccess","err","onError","readAsDataURL","reset","pop","deleteSpinnerField","toString","fg","createSpFormGroup","idx","removeAt","option","spinner","status","counter","value","forEach","element","field","email","deleteSpinner","sendSpinner","get","onChange","onSubmit","fil","EmailListComponent","emailService","getEmails","console","log","LoginComponent","NavbarComponent","EmailsService","http","processHTTPMsgService","URL_API","pipe","data","handleError","providedIn","ImageService","imageF","FormData","append","post","ProcessHTTPMsgService","error","errMsg","ErrorEvent","message","statusText","SpinnerCustomizerControllerService","httpOptions","headers","SpinnerService","hex","indexOf","slice","r","parseInt","g","b","padZero","str","len","zeros","Array","join","ImageSnippet","src","pending","formSpinnerControl","isImage","textOne","isEmail","bgColor","SpinnerComponent","API_IMAGE_URL","bgColorStyle","fontColor","fieldStyleNth","holder","state","clicks","initialDegreesStart","initialDegreesEnd","degreesRotated","resultingField","getSpinner","spinnerFields","SpinnerFields","angle","replace","invertColor","degree","newDegree","extraDegree","Math","floor","random","totalDegree","numberOfSpins","fraction","tilting","DeterminResult","spiningRotate","wheelSecs","wheelSec","t","nativeElement","noY","c","n","interval","setInterval","clearInterval","rect","getBoundingClientRect","aoY","top","document","body","scrollTop","Text","innerHTML","spinMovemente","setTimeout","spining","rectTwo","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { routes } from './routes';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { CustomizeSpinnerComponent } from '../customize-spinner/customize-spinner.component';\r\nimport { EmailListComponent } from '../email-list/email-list.component';\r\nimport { CustomScriptComponent } from '../custom-script/custom-script.component';\r\nimport { SpinnerComponent } from '../spinner/spinner.component'\r\n\r\nexport const routes: Routes = [\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'spinner', component: SpinnerComponent },\r\n    { path: 'customize-spinner', component: CustomizeSpinnerComponent },\r\n    { path: 'email-list', component: EmailListComponent },\r\n    { path: 'custom-script', component: CustomScriptComponent},\r\n    { path: '', redirectTo: '/login', pathMatch: 'full' }\r\n];","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'spinner-app';\r\n  // code for testing backend, remove \"implements oninit\", constructor and ngOnInit later\r\n  testBackend:string;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { bootstrap } from 'bootstrap'\r\n\r\nimport { AppRoutingModule } from './app-routing/app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { CustomizeSpinnerComponent } from './customize-spinner/customize-spinner.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { EmailListComponent } from './email-list/email-list.component';\r\nimport { CustomScriptComponent } from './custom-script/custom-script.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { SpinnerComponent } from './spinner/spinner.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    CustomizeSpinnerComponent,\r\n    EmailListComponent,\r\n    CustomScriptComponent,\r\n    NavbarComponent,\r\n    SpinnerComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    NoopAnimationsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgbModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-custom-script',\r\n  templateUrl: './custom-script.component.html',\r\n  styleUrls: ['./custom-script.component.scss']\r\n})\r\nexport class CustomScriptComponent implements OnInit {\r\n  \r\n  public isMenuCollapsed = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"row bgColor\">\r\n    \r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n\r\n    <div class=\"container col-12 col-lg-10\">\r\n        <div class=\"title\">\r\n            <h2>Insert Custom Script</h2>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-10 mr-auto\">\r\n                <form action=\"\">\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"header\">HEADER:</label>\r\n                        <textarea class=\"form-control\" id=\"header\" name=\"header\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"footer\">Footer:</label>\r\n                        <textarea class=\"form-control\" id=\"footer\" name=\"footer\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"title\">Page title:</label>\r\n                        <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\">  \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"description\">Page description:</label>\r\n                        <textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"favicon\">Favicon:</label>\r\n                        <input type=\"file\">    \r\n                    </div>\r\n    \r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <button class=\"btn btn-info\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    \r\n    </div>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder,FormArray, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { SpinnerCustomizerControllerService } from '../services/spinner-customizer-controller.service';\r\nimport { ImageService } from '../services/image.service';\r\nimport { formSpinnerControl } from '../shared/form-spinner-controller';\r\nimport { ImageSnippet } from '../shared/ImageSnippet';\r\n\r\n@Component({\r\n  selector: 'app-customize-spinner',\r\n  templateUrl: './customize-spinner.component.html',\r\n  styleUrls: ['./customize-spinner.component.scss']\r\n})\r\nexport class CustomizeSpinnerComponent implements OnInit {\r\n\r\n  //Collapse menu\r\n  public isMenuCollapsed = true;\r\n\r\n  // For number of field dropdown\r\n  items: any[] = [];\r\n\r\n  spinnerForm: FormGroup;\r\n  submitPressed = false;\r\n\r\n  // For imageUpload / Text Field\r\n  itIsImageFile: boolean[] = [false];\r\n  itIsTextField: boolean[] = [false];\r\n  // For imageUpload / Text Field\r\n\r\n  // For results dropdown\r\n  itIsTextPopUp: boolean[] = [false];\r\n  itIsEmailPopUp: boolean[] = [false];\r\n  // For results dropdown\r\n\r\n  // Form validations:\r\n  //controllerForm: FormGroup;\r\n  errMess: string;\r\n\r\n  // For image Upload\r\n  selectedFile: ImageSnippet;\r\n  StringOfImageUpload: UploadFile[] = [];\r\n  SuccessfullyUpload: boolean[] = [];\r\n  UnsuccessfullyUpload: boolean[] = [];\r\n\r\n  constructor(\r\n    public formBuilder:FormBuilder,// For number of field dropdown\r\n    private spinnerService: SpinnerCustomizerControllerService,// Form validations\r\n    private imageService: ImageService  ) {       \r\n    // Setting Form Array\r\n    this.spinnerForm = this.formBuilder.group({\r\n\t\t\tspinnerArray: this.formBuilder.array(\r\n\t\t\t\t[],\r\n\t\t\t\t[Validators.required])\r\n\t\t});\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    // Sets default 6 boxes\r\n    for (let i = 0; i < 6; i++) {\r\n      this.addControl(i);\r\n    }\r\n    // For imageUpload / Text Field\r\n    let i = 0;\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsImageFile[i] = true;\r\n    }\r\n    // For imageUpload / Text Field\r\n\r\n    // For number of field dropdown\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsTextPopUp[i] = true;\r\n    }\r\n    // For number of field dropdown\r\n\r\n  }\r\n\r\n \r\n\r\n\tcreateSpFormGroup() {\r\n\t\treturn this.formBuilder.group({\r\n      isItImage: [true, [Validators.required]],\r\n      file: [''],\r\n      textFieldOne:[''],\r\n      percentage: ['', [Validators.required, Validators.pattern(/^[1-9]\\d*$/)]],\r\n      isItEmail: [true, [Validators.required]],\r\n      textPopUp: [''],\r\n      emails: [''],\r\n      color: ['', [Validators.required]],\r\n\t\t})\r\n  }\r\n\r\n   //Image Upload\r\n   private onSuccess(index, path) {\r\n    this.StringOfImageUpload.push(new UploadFile(index, path));\r\n    this.SuccessfullyUpload[index] = true;\r\n    this.UnsuccessfullyUpload[index] = false; \r\n    //this.selectedFile.pending = false;\r\n    //this.selectedFile.status = 'ok';\r\n  }\r\n\r\n  private onError(index) {\r\n    this.UnsuccessfullyUpload[index] = true; \r\n    this.SuccessfullyUpload[index] = false;\r\n    //this.selectedFile.pending = false;\r\n    //this.selectedFile.status = 'fail';\r\n    //this.selectedFile.src = '';\r\n  }\r\n\r\n\r\n  processFile(image: any, index) {\r\n      let files = image.srcElement.files;\r\n      let file: File = files[0];\r\n      let reader = new FileReader();\r\n      reader.addEventListener('load', (event: any) => {\r\n        this.selectedFile = new ImageSnippet(event.target.result, file);\r\n        this.imageService.uploadImage(this.selectedFile.file)\r\n          .subscribe((res) => {\r\n            this.onSuccess(index, res.path);\r\n          },\r\n          (err) => {\r\n            this.onError(index)\r\n            throw new Error(err);\r\n          });\r\n      });\r\n      reader.readAsDataURL(file);\r\n  }\r\n  //Image Upload\r\n  \r\n  get spinnerArray(): FormArray {\r\n\t\tif ( this.spinnerForm) {\r\n      return this.spinnerForm.get('spinnerArray') as FormArray;\r\n    }\r\n\t}\r\n  // For number of field dropdown\r\n  onChange(i) {\r\n    this.items.length = 0;   // eliminates defalut setting before adding other\r\n    this.spinnerForm.reset();\r\n    while(this.spinnerArray.length > 0) {\r\n      this.items.pop();\r\n      this.deleteSpinnerField(0);\r\n    }\r\n    while(i > 0) {\r\n      this.addControl(i);\r\n      i--;\r\n    }\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsImageFile[i] = true;\r\n    }\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsTextPopUp[i] = true;\r\n    }\r\n  }\r\n  addControl(i) {\r\n    this.items.push({id: i.toString()})\r\n\t\tlet fg = this.createSpFormGroup();\r\n\t\tif(this.spinnerArray) {\r\n      this.spinnerArray.push(fg);\r\n    }\r\n  }\r\n\r\n  deleteSpinnerField(idx: number) {\r\n\t\tthis.spinnerArray.removeAt(idx);\r\n  }\r\n  \r\n  // For number of field dropdown\r\n\r\n  //For image text selection\r\n  onChangeImage(option, i) {\r\n      if ( option === \"0: true\" ) {\r\n        this.itIsImageFile[i] = true;\r\n        this.itIsTextField[i] = false;\r\n        \r\n      }\r\n      else if( option === \"1: false\") {\r\n        this.itIsImageFile[i] = false;\r\n        this.itIsTextField[i] = true;\r\n      }\r\n  }\r\n  //For image text selection\r\n\r\n  // For number of field dropdown\r\n  onChangeResult(option, i) {\r\n    if ( option === 'text' ) {\r\n      this.itIsTextPopUp[i] = true;\r\n      this.itIsEmailPopUp[i] = false;\r\n    }\r\n    else if( option === 'email' ) {\r\n      this.itIsTextPopUp[i] = false;\r\n      this.itIsEmailPopUp[i] = true;\r\n    }\r\n}\r\n  // For number of field dropdown\r\n\r\n  onSubmit() {\r\n    let spinner: Array<formSpinnerControl> = [];\r\n    this.submitPressed = true;\r\n    \r\n    // if a field outside the array is added, change this to this.spinnerForm.value\r\n    if (this.spinnerForm.status === \"VALID\") {\r\n      let counter = 0;\r\n  \r\n      this.spinnerArray.value.forEach(element => {\r\n        let field = new formSpinnerControl(\r\n          element.isItImage,\r\n          element.image,\r\n          element.textFieldOne,\r\n          element.percentage,\r\n          element.isItEmail,\r\n          element.textPopUp,\r\n          element.email,\r\n          element.color\r\n        )\r\n\r\n        this.StringOfImageUpload.forEach((file)=>{\r\n          if(file.index == counter){\r\n            field.image = file.image;\r\n          } \r\n        })\r\n        spinner.push(field);\r\n\r\n        counter++;\r\n      });\r\n\r\n    }\r\n\r\n    this.spinnerService.deleteSpinner().subscribe(() => {\r\n      this.spinnerService.sendSpinner(spinner).subscribe((res) => {\r\n        this.spinnerForm.reset();\r\n        this.StringOfImageUpload = []; // Resets the StringOfImageUpload array\r\n      }, err =>{\r\n        throw new Error('Error Sending the information about the spinner');\r\n      });\r\n    }, err => {\r\n      throw new Error('Error deleting the information of the previous spineer');\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport class UploadFile {\r\n  index: number;\r\n  image: any;\r\n\r\n  constructor(idx, fil){\r\n    this.index = idx;\r\n    this.image = fil;\r\n  }\r\n}\r\n","<div class=\"row bgColor\">\r\n\r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n    \r\n    <div class=\"container menu1 col-12 col-lg-10\">\r\n    \r\n        <h2>Customize the spinner</h2>\r\n    \r\n        <div class=\"row my-5\">\r\n            <div class=\"col-12\">\r\n      \r\n                <div id=\"settingNumber\">\r\n                    <div>\r\n                        <label class=\"mr-3\" for=\"numberOptions\">Number of fields on the spinner </label>\r\n                        <select matNativeControl name=\"numberOptions\" required (change)=\"onChange($event.target.value)\">\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\" selected>6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-12\">\r\n            <form [formGroup]=\"spinnerForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div>\r\n\r\n                    <div class=\"table-responsive\">\r\n                        <table class=\"table table-borderless\">\r\n                            <div formArrayName=\"spinnerArray\">\r\n                                <tr>\r\n                                    <th><label for=\"ImageOption\">Input type</label></th>\r\n                                    <th><label for=\"\">File / Text</label></th>\r\n                                    <th><label for=\"\">Percentage</label></th>\r\n                                    <th><label for=\"\">Result</label></th>\r\n                                    <th><label for=\"\">Text / Email</label></th>\r\n                                    <th><label for=\"\">bg Color</label></th>\r\n                                </tr>\r\n                                <tr *ngFor=\"let spinnerfield of spinnerArray.controls; let i = index\" [formGroupName]=\"i\">\r\n\r\n                                    <td>\r\n                                        <select formControlName=\"isItImage\" required (change)=\"onChangeImage($event.target.value, i)\">\r\n                                            <option [ngValue]=\"true\" selected>Image</option>\r\n                                            <option [ngValue]=\"false\">Text</option>\r\n                                        </select>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsImageFile[i]\">\r\n                                        <div id=\"ImageUploadBox\">\r\n                                            <div class=\"col-9\" id=\"FileUploadBox\">\r\n                                                <input #imageInput\r\n                                                formControlName=\"file\"\r\n                                                type=\"file\" \r\n                                                accept=\"image/*\"\r\n                                                name=\"imageFile\"\r\n                                                (change)=\"processFile($event, i)\">\r\n        \r\n                                            </div>\r\n    \r\n                                            <div class=\"col-3\" id=\"FileUploadMessageBox\" *ngIf=\"selectedFile\">\r\n                                                <div *ngIf=\"SuccessfullyUpload[i]\" class=\"alert alert-success d-flex justify-content-center\"> <span>&#10004;</span></div>\r\n                                                <div *ngIf=\"UnsuccessfullyUpload[i]\" class=\"alert alert-danger d-flex justify-content-center\"> <span>&#x2716;</span></div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsTextField[i]\">\r\n                                        <input formControlName=\"textFieldOne\" type=\"text\" name=\"textField\">\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <input formControlName=\"percentage\" type=\"number\" name=\"textField\" [class.invalid]=\"spinnerfield.controls.percentage.hasError('required')  && submitPressed\">\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <select formControlName=\"isItEmail\" name=\"resultOption\" required (change)=\"onChangeResult($event.target.value, i)\">\r\n                                            <option [ngValue]=\"true\" selected>Text Popup</option>\r\n                                            <option [ngValue]=\"false\">Email Popup</option>\r\n                                        </select>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsTextPopUp[i]\">\r\n                                        <input formControlName=\"textPopUp\"  type=\"text\" name=\"imageFile\">\r\n                                    </td>\r\n                \r\n                                    <td *ngIf=\"itIsEmailPopUp[i]\">\r\n                                        <input formControlName=\"emails\" type=\"email\" name=\"textField\">\r\n                                    </td>\r\n\r\n                                    <td class=\"col-2\">\r\n                                        <input formControlName=\"color\" type=\"color\" [class.invalid]=\"spinnerfield.controls.color.hasError('required')  && submitPressed\">\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            </div>\r\n\r\n                        </table>\r\n                    </div>\r\n\r\n                    \r\n    \r\n                    <button type=\"submit\" class=\"btn btn-success ml-auto\"\r\n                    >Submit</button>\r\n                    \r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    \r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { EmailsService } from '../services/emails.service';\r\n\r\n@Component({\r\n  selector: 'app-email-list',\r\n  templateUrl: './email-list.component.html',\r\n  styleUrls: ['./email-list.component.scss']\r\n})\r\nexport class EmailListComponent implements OnInit {\r\n\r\n  public isMenuCollapsed = true;\r\n\r\n  emails: any;\r\n\r\n  constructor( private emailService: EmailsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getEmails();\r\n  }\r\n\r\n  getEmails(): void {\r\n    this.emailService.getEmails()\r\n      .subscribe( emails => {\r\n        this.emails = emails;\r\n        console.log(this.emails);\r\n      })\r\n  }\r\n\r\n}\r\n","<div class=\"row bgColor\">\r\n\r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n\r\n    <div class=\"container col-12 col-lg-10\">\r\n        <div id=\"title\">\r\n            <h2>List of collected Emails</h2>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-12 d-flex justify-content-end mb-5\">\r\n                <button class=\"btn btn-info\">Export results csv/excel</button>\r\n            </div>\r\n            <div class=\"table-responsive\" *ngIf=\"emails\">\r\n                <table class=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Email Address</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Date Spin</th>\r\n                            <th>Result</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let email of emails\">\r\n                            <td>{{email.emailAddress}}</td>\r\n                            <td>{{email.firstName}}</td>\r\n                            <td>{{email.lastName}}</td>\r\n                            <td>{{email.updatedAt | date}}</td>\r\n                            <td>{{email.result}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n    \r\n    \r\n                </table>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n\r\n    <div class=\"align-middle\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"title d-flex justify-content-center\">\r\n                    <h1>LOGIN</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"formContent\">\r\n                    <form>\r\n                        <div class=\"row\">\r\n    \r\n                            <div class=\"col-12 d-flex justify-content-center mb-2\">\r\n                                <div class=\"field\">\r\n                                    <input type=\"email\" placeholder=\"Email Address\" name=\"email\" required>\r\n                                </div>\r\n                            </div>\r\n    \r\n                            <div class=\"col-12 d-flex justify-content-center mb-2\">\r\n                                <div class=\"field\">\r\n                                    <input type=\"password\" placeholder=\"Enter your password\" name=\"password\" required>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"col-12 d-flex justify-content-center\">\r\n                                <div class=\"field d-flex justify-content-end\">\r\n                                    <button class=\"btn btn-sm btn-danger\">Login</button>\r\n                                </div>\r\n                            </div>\r\n    \r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    \r\n\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.scss']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"container align-items-start pl-4\">\r\n\r\n  <div>\r\n    <div class=\"image img-fluid\">\r\n      <img src=\"https://dam.ngenespanol.com/wp-content/uploads/2019/06/arbol-mas-alto-del-mundo-770x395.png\" alt=\"Fixed Photo\">\r\n  </div>\r\n  <div class=\"mt-3\">\r\n      <ul class=\"nav flex-column\">\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/customize-spinner\">CUSTOMIZE SPINNER</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/email-list\">EMAIL LIST</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/custom-script\">CUSTOM SCRIPIT</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">SUPPORT</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">REQUEST FEATURE</a>\r\n          </li>\r\n            \r\n        </ul>\r\n  </div>\r\n  </div>\r\n\r\n    \r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmailsService {\r\n\r\n  URL_API = \"/api/v1/results\";\r\n  \r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n  getEmails(): Observable<any> {\r\n    return this.http.get<any>(this.URL_API) //Check and test later\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n\r\n  URL_API = \"/api/v1/imageUpload\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public uploadImage(image: File): Observable<any> {\r\n    const imageF = new FormData();\r\n\r\n    imageF.append('imageFile', image);\r\n\r\n    return this.http.post(this.URL_API, imageF);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProcessHTTPMsgService {\r\n\r\n  constructor() { }\r\n\r\n  public handleError(error: HttpErrorResponse | any) {\r\n    let errMsg: string;\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      errMsg = error.error.message;\r\n    } else {\r\n      errMsg = `${error.status} - ${error.statusText || ''} ${error.error}`;\r\n    }\r\n\r\n    return throwError(errMsg);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { formSpinnerControl } from '../shared/form-spinner-controller';\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerCustomizerControllerService {\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n\r\n  URL_API = \"/api/v1/spinner\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n  sendSpinner( spinnerArray: Array <formSpinnerControl>) {\r\n    return this.http.post(this.URL_API, spinnerArray);\r\n  }\r\n\r\n  deleteSpinner() {\r\n    return this.http.delete(this.URL_API);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerService {\r\n\r\n  URL_API = \"/api/v1/spinner\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService\r\n  ) { }\r\n\r\n  getSpinner(): Observable<any> {\r\n    return this.http.get<any>(this.URL_API) //Check and test later\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n\r\n\r\n  //Inverter color function\r\n  invertColor(hex): any {\r\n    if (hex.indexOf('#') === 0) {\r\n      hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n    if (hex.length !== 6) {\r\n      throw new Error('Invalid HEX color.');\r\n    }\r\n    // invert color components\r\n    var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\r\n        g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\r\n        b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);\r\n    // pad each with zeros and return\r\n    function padZero(str) {\r\n      let len = 2;\r\n      var zeros = new Array(len).join('0');\r\n      return (zeros + str).slice(-len);\r\n    }\r\n    return '#' + padZero(r) + padZero(g) + padZero(b);\r\n  }\r\n  ///////////////////////////\r\n\r\n}\r\n","export class ImageSnippet {\r\n    pending: boolean = false;\r\n    status: string = 'init';\r\n    constructor(public src: string, public file: File) {}\r\n}","export class formSpinnerControl {\r\n    isItImage: boolean;\r\n    image: any;\r\n    textFieldOne: string;\r\n    percentage: number;\r\n    isItEmail: boolean;\r\n    textPopUp: string;\r\n    email: string;\r\n    bgColor: string;\r\n\r\n    constructor(isImage, image, textOne, percentage, isEmail, textPopUp, email, color){\r\n        this.isItImage = isImage;\r\n        this.image = image;\r\n        this.textFieldOne = textOne;\r\n        this.percentage = percentage;\r\n        this.isItEmail = isEmail;\r\n        this.textPopUp = textPopUp;\r\n        this.email = email;\r\n        this.bgColor = color;\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, QueryList, ViewChildren, ElementRef } from '@angular/core';\r\n\r\nimport { SpinnerService } from '../services/spinner.service';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n  API_IMAGE_URL = '/api/v1/imageUpload/';\r\n  SpinnerFields: any;\r\n  bgColorStyle: any[] = ['']; // Backgorund color\r\n  fontColor: any[] = ['']; // Font Color\r\n\r\n  fieldStyleNth: any[] = [''] //Individual field style\r\n  holder: any[] = ['']\r\n\r\n  state: string = 'default';\r\n\r\n  //Animations\r\n  clicks: number = 1;\r\n  degree: number;\r\n  newDegree: number;\r\n  extraDegree: number; \r\n  totalDegree: number;\r\n  spiningRotate: any;\r\n\r\n  @ViewChildren('wheelSec') wheelSecs: QueryList<any>;\r\n  @ViewChild('txt') Text;\r\n  @ViewChild('spin') spin;\r\n\r\n  spinMovemente: any;\r\n\r\n  //Results\r\n  initialDegreesStart: any[] = [''];\r\n  initialDegreesEnd: any[] = [''];\r\n  degreesRotated: number = 0;\r\n  resultingField: number = 0;\r\n  ///\r\n\r\n  constructor( private spinnerService: SpinnerService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getSpinner();\r\n  }\r\n\r\n  getSpinner(): void {\r\n    this.spinnerService.getSpinner()\r\n      .subscribe( spinnerFields => {\r\n        //spinnerFields.image = spinnerFields.image.replace(\"\\\", \"/\");\r\n        this.SpinnerFields = spinnerFields;\r\n        let angle = 360/this.SpinnerFields.length;\r\n        for(let i=0; i<this.SpinnerFields.length; i++) { //Substitute backslashes for slashes\r\n          this.SpinnerFields[i].image = this.SpinnerFields[i].image.replace(/\\\\/g, \"/\");\r\n          this.SpinnerFields[i].image = this.API_IMAGE_URL + this.SpinnerFields[i].image.slice(14);\r\n          this.bgColorStyle[i] = this.SpinnerFields[i].bgColor; // Backgorund color\r\n          this.fontColor[i] = this.spinnerService.invertColor(this.bgColorStyle[i]); //Font Color\r\n          this.holder[i] = {'transform': 'rotate(' + angle*(i) + 'deg)',\r\n                            '-webkit-transform': 'rotate(' + angle*(i) + 'deg)',\r\n                            '-moz-transform': 'rotate(' + angle*(i) + 'deg)',\r\n                            '-o-transform': 'rotate(' + angle*(i) + 'deg)',\r\n                            '-ms-transform': 'rotate(' + angle*(i) + 'deg)',}\r\n\r\n          this.fieldStyleNth[i] = {'transform': 'rotate(' + angle + 'deg)',\r\n                                  '-webkit-transform': 'rotate(' + angle + 'deg)',\r\n                                  '-moz-transform': 'rotate(' + angle + 'deg)',\r\n                                  '-o-transform': 'rotate(' + angle + 'deg)',\r\n                                  '-ms-transform': 'rotate(' + angle + 'deg)',\r\n                                  'background-color': this.bgColorStyle[i],\r\n                                  'color': this.fontColor[i]\t}\r\n\r\n          this.initialDegreesStart[i] = angle*i\r\n          this.initialDegreesEnd[i] = this.initialDegreesStart[i] + angle;\r\n        }\r\n      })\r\n  }\r\n\r\n  rotate() {\r\n    this.degree = 360*8;\r\n    this.clicks = ++this.clicks;\r\n    this.newDegree = this.degree * this.clicks;\r\n    this.extraDegree = Math.floor(Math.random() * (360)) + 1;\r\n    this.totalDegree = this.newDegree + this.extraDegree;\r\n\r\n    let numberOfSpins = this.totalDegree/360;\r\n    let fraction = numberOfSpins % 1\r\n    this.degreesRotated = fraction*360;\r\n    \r\n    this.tilting();\r\n    this.DeterminResult()\r\n  }\r\n\r\n  spining() {\r\n    this.spiningRotate = { 'transform': 'rotate(-' + this.totalDegree + 'deg)'};\r\n  }\r\n\r\n  tilting() {\r\n    \r\n    this.wheelSecs.forEach( (wheelSec) => {\r\n      var t = wheelSec.nativeElement;\r\n      var noY = 0;\r\n      var c = 0;\r\n      var n = 700;\r\n      var interval = setInterval(() => {\r\n        c = c++;\r\n        if (c === n) { \r\n          clearInterval(interval);\t\t\t\t\r\n        }\t\r\n        var rect = t.getBoundingClientRect();\r\n        var aoY = {\r\n          top: rect.top + document.body.scrollTop\r\n        }\r\n        this.Text.innerHTML = aoY;\r\n\t\t\t\tif(aoY.top < 23.89){\r\n          this.spinMovemente = {'-webkit-animation': 'hh 0.1s',\r\n                                'animation': 'hh 0.1s'}\r\n\t\t\t\t\tsetTimeout(() => { \r\n            this.spinMovemente = ''\r\n\t\t\t\t\t}, 100);\t\r\n\t\t\t\t}\r\n      }, 10);\r\n\r\n      this.spining();\r\n\r\n      var rectTwo = t.getBoundingClientRect();\r\n      noY = rectTwo.top + document.body.scrollTop;\r\n    });\r\n  }\r\n\r\n\r\n  DeterminResult() {\r\n    for( let i=0; i<this.initialDegreesEnd.length; i++) {\r\n      //console.log(this.initialDegreesEnd[0]);\r\n      if (this.degreesRotated <= this.initialDegreesEnd[0]) {\r\n        this.resultingField = i;\r\n        break\r\n      }\r\n      else if ( this.degreesRotated > this.initialDegreesEnd[0] \r\n        && this.degreesRotated <= this.initialDegreesEnd[i] \r\n        && this.degreesRotated > this.initialDegreesEnd[i-1]) {\r\n          this.resultingField = i;\r\n      }\r\n    }\r\n    \r\n    if (this.SpinnerFields[this.resultingField].isItEmail === true) {\r\n        ///Code to result\r\n    }\r\n    else if (this.SpinnerFields[this.resultingField].isItEmail === false) {\r\n        ///Code to result\r\n    }\r\n\r\n    console.log(this.resultingField);\r\n    console.log(this.SpinnerFields[this.resultingField]);\r\n  }\r\n}","<div id=\"wrapper\">\r\n            \r\n    <div *ngIf=\"SpinnerFields\" id=\"wheel\">\r\n\r\n        <div id=\"inner-wheel\" [style]=\"spiningRotate\">\r\n            <div *ngFor=\"let field of SpinnerFields; let i = index\">\r\n                <div #wheelSec>\r\n                    <div [style]=\"holder[i]\" class=\"hold\" *ngIf=\"field.isItImage\">\r\n                        <div  class=\"sec\" id=\"wheelSec\" [style]=\"fieldStyleNth[i]\">\r\n                            <div> <span> <img [src]=\"field.image\" alt=\"\">\r\n                                {{field.image}} </span></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div [style]=\"holder[i]\" class=\"hold\" *ngIf=\"!field.isItImage\">\r\n                        <div class=\"sec\" [style]=\"fieldStyleNth[i]\">\r\n                            <div><span>{{field.textFieldOne}}</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>       \r\n           \r\n\r\n        </div>\r\n        <div id=\"spin\" (click)=\"rotate()\" #spin [style]=\"spinMovemente\">\r\n            <div id=\"inner-spin\"></div>\r\n        </div>\r\n        \r\n        <div id=\"shine\"></div>\r\n        \r\n    </div>\r\n    \r\n    <div id=\"txt\" #txt></div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}