{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing/app-routing.module.ts","webpack:///src/app/app-routing/routes.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/custom-script/custom-script.component.ts","webpack:///src/app/custom-script/custom-script.component.html","webpack:///src/app/customize-spinner/customize-spinner.component.ts","webpack:///src/app/customize-spinner/customize-spinner.component.html","webpack:///src/app/email-list/email-list.component.ts","webpack:///src/app/email-list/email-list.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/services/center-image.service.ts","webpack:///src/app/services/custom-script.service.ts","webpack:///src/app/services/emails.service.ts","webpack:///src/app/services/guards/login.guard.ts","webpack:///src/app/services/header-footer.service.ts","webpack:///src/app/services/image.service.ts","webpack:///src/app/services/login.service.ts","webpack:///src/app/services/process-httpmsg.service.ts","webpack:///src/app/services/spinner-customizer-controller.service.ts","webpack:///src/app/services/spinner.service.ts","webpack:///src/app/shared/ImageSnippet.ts","webpack:///src/app/shared/form-spinner-controller.ts","webpack:///src/app/spinner/spinner.component.ts","webpack:///src/app/spinner/spinner.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppRoutingModule","forRoot","declarations","imports","routes","path","component","canActivate","redirectTo","pathMatch","AppComponent","headerFooterService","metaService","Pagetitle","API_IMAGE_URL","favIcon","document","querySelector","title","getHeaderFooter","subscribe","headerFooter","HeaderFooter","href","favicon","slice","setTitle","pageTitle","addTag","name","content","pageDescription","selector","templateUrl","styleUrls","AppModule","providers","bootstrap","CustomScriptComponent","customScriptService","imageService","fb","isMenuCollapsed","formErrors","createForm","HeaderFooterForm","group","header","footer","StringOfImageUpload","SuccessfullyUpload","UnsuccessfullyUpload","image","files","srcElement","file","reader","FileReader","addEventListener","event","selectedFile","target","result","uploadImage","res","onSuccess","err","onError","readAsDataURL","deleteHeaderFooter","formCopy","value","replace","console","log","sendHeaderFooter","HFform","form","reset","onSubmit","processFile","CustomizeSpinnerComponent","formBuilder","spinnerService","centerImageService","items","submitPressed","itIsImageFile","itIsTextField","itIsTextPopUp","itIsEmailPopUp","totalPercentage","spinnerForm","spinnerArray","array","required","createFormFieldForCenterSpinnerImage","i","addControl","length","isItImage","textFieldOne","percentage","pattern","isItEmail","textPopUp","emails","color","CenterImageForm","centerImage","index","push","UploadFile","StringOfSpinnerCenter","SuccessSpinnerCenter","UnsuccessSpinnerCenter","selectedCenterFile","onSuccessCenter","onErrorCenter","pop","deleteSpinnerField","toString","fg","createSpFormGroup","idx","removeAt","deleteImageCenter","option","spinner","status","counter","forEach","element","field","email","percentageSum","reduce","a","b","deleteSpinner","sendSpinner","centerCopy","sendImageCenter","centerform","get","onChange","onSubmitCenterImage","ProcessCenterImage","deleteImage","fil","EmailListComponent","emailService","getEmails","LoginComponent","loginservice","router","LoginError","LoginForm","username","password","user","controls","Login","resp","success","localStorage","setItem","token","navigate","NavbarComponent","clear","logout","CenterImageService","http","processHTTPMsgService","URL_API","pipe","data","handleError","Form","httpOptions","headers","post","providedIn","CustomScriptService","EmailsService","TOKEN","getItem","LoginGuard","HeaderFooterService","URL_API_HEADER","ImageService","imageF","FormData","append","LoginService","userLogin","pass","ProcessHTTPMsgService","error","errMsg","ErrorEvent","message","statusText","SpinnerCustomizerControllerService","SpinnerService","URL_API_SPINNER","hex","indexOf","r","parseInt","g","padZero","str","len","zeros","Array","join","ImageSnippet","src","pending","formSpinnerControl","isImage","textOne","isEmail","bgColor","SpinnerComponent","emailSevice","modalService","bgColorStyle","fontColor","fieldStyleNth","holder","state","clicks","totalDegree","initialDegreesStart","initialDegreesEnd","degreesRotated","resultingField","closeResult","getSpinner","getImageCenter","spinnerFields","SpinnerFields","angle","invertColor","degreeSpinn","newDegree","CalculateDegreesRotated","extraDegree","spining","ExposingResult","spiningRotate","setTimeout","open","ResultEmail","ResultText","sendEmailForm","firstName","lastName","emailAddress","FinalResult","sendEmails","emailForm","DegreesArray","sum","random","Math","random2","floor","ariaLabelledBy","reason","getDismissReason","ESC","BACKDROP_CLICK","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { routes } from './routes';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { CustomizeSpinnerComponent } from '../customize-spinner/customize-spinner.component';\r\nimport { EmailListComponent } from '../email-list/email-list.component';\r\nimport { CustomScriptComponent } from '../custom-script/custom-script.component';\r\nimport { SpinnerComponent } from '../spinner/spinner.component'\r\nimport { LoginGuard } from '../services/guards/login.guard';\r\n\r\nexport const routes: Routes = [\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'spinner', component: SpinnerComponent },\r\n    { path: 'customize-spinner', component: CustomizeSpinnerComponent, canActivate: [LoginGuard] },\r\n    { path: 'email-list', component: EmailListComponent, canActivate: [LoginGuard] },\r\n    { path: 'custom-script', component: CustomScriptComponent, canActivate: [LoginGuard]},\r\n    { path: '', redirectTo: '/login', pathMatch: 'full' },\r\n    { path: '**', redirectTo: '/login', pathMatch:'full' }\r\n];","import { Component, OnInit } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\n\r\nimport { HeaderFooterService } from './services/header-footer.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n\r\n  API_IMAGE_URL = '/api/v1/imageUpload/';\r\n  favIcon: HTMLLinkElement = document.querySelector('#favIcon');\r\n  HeaderFooter: any;\r\n\r\n  title = 'spinner-app';\r\n  // code for testing backend, remove \"implements oninit\", constructor and ngOnInit later\r\n  testBackend:string;\r\n  constructor(    \r\n    private headerFooterService: HeaderFooterService,\r\n    private metaService: Meta,\r\n    private Pagetitle: Title) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getHeaderFooter();\r\n  }\r\n\r\n  getHeaderFooter() {\r\n    this.headerFooterService.getHeaderFooter()\r\n      .subscribe( headerFooter => {\r\n        this.HeaderFooter = headerFooter[0];\r\n        this.favIcon.href = this.API_IMAGE_URL + this.HeaderFooter.favicon.slice(14);\r\n        this.Pagetitle.setTitle( this.HeaderFooter.pageTitle );\r\n        this.metaService.addTag({ name: 'description', content: this.HeaderFooter.pageDescription }); //Description\r\n      });\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>","import { BrowserModule, Meta, Title } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { bootstrap } from 'bootstrap'\r\n\r\nimport { AppRoutingModule } from './app-routing/app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { CustomizeSpinnerComponent } from './customize-spinner/customize-spinner.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { EmailListComponent } from './email-list/email-list.component';\r\nimport { CustomScriptComponent } from './custom-script/custom-script.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { SpinnerComponent } from './spinner/spinner.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    CustomizeSpinnerComponent,\r\n    EmailListComponent,\r\n    CustomScriptComponent,\r\n    NavbarComponent,\r\n    SpinnerComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    NoopAnimationsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgbModule\r\n  ],\r\n  providers: [Meta, Title],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { CustomScriptService } from '../services/custom-script.service';\r\nimport { ImageService } from '../services/image.service';\r\n\r\nimport { ImageSnippet } from '../shared/ImageSnippet';\r\n\r\n@Component({\r\n  selector: 'app-custom-script',\r\n  templateUrl: './custom-script.component.html',\r\n  styleUrls: ['./custom-script.component.scss']\r\n})\r\nexport class CustomScriptComponent implements OnInit {\r\n  \r\n  public isMenuCollapsed = true;\r\n\r\n  HeaderFooterForm: FormGroup;\r\n  form: any;\r\n  formCopy: any;\r\n  errMess: string;\r\n\r\n  selectedFile: ImageSnippet;\r\n  StringOfImageUpload: string;\r\n  SuccessfullyUpload: boolean;\r\n  UnsuccessfullyUpload: boolean;\r\n\r\n  formErrors = {\r\n    'Header': '',\r\n    'Footer': '',\r\n    'PageTitle': '',\r\n    'pageDescription': '',\r\n    'favicon': ''\r\n  };\r\n\r\n\r\n\r\n  constructor( \r\n    private customScriptService: CustomScriptService,\r\n    private imageService: ImageService,\r\n    private fb: FormBuilder) {\r\n      this.createForm();\r\n     }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  createForm() {\r\n    this.HeaderFooterForm = this.fb.group({\r\n      header: [''],\r\n      footer: [''],\r\n      pageTitle: [''],\r\n      pageDescription: [''],\r\n      favicon: ['']\r\n    });\r\n\r\n  }\r\n\r\n  private onSuccess(path) {\r\n    this.StringOfImageUpload = path;\r\n    this.SuccessfullyUpload = true;\r\n    this.UnsuccessfullyUpload = false; \r\n  }\r\n\r\n  private onError() {\r\n    this.UnsuccessfullyUpload = true; \r\n    this.SuccessfullyUpload = false;\r\n  }\r\n\r\n\r\n  processFile(image: any) {\r\n    let files = image.srcElement.files;\r\n    let file: File = files[0];\r\n    let reader = new FileReader();\r\n    reader.addEventListener('load', (event: any) => {\r\n      this.selectedFile = new ImageSnippet(event.target.result, file);\r\n      this.imageService.uploadImage(this.selectedFile.file)\r\n        .subscribe((res) => {\r\n          this.onSuccess(res.path);\r\n        },\r\n        (err) => {\r\n          this.onError()\r\n          throw new Error(err);\r\n        });\r\n    });\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.customScriptService.deleteHeaderFooter().subscribe(()=> {\r\n      this.formCopy = this.HeaderFooterForm.value;\r\n      this.formCopy.favicon = this.StringOfImageUpload.replace(/\\\\/g, \"/\");\r\n      console.log(this.formCopy);\r\n      this.customScriptService.sendHeaderFooter(this.formCopy)\r\n        .subscribe(HFform => {\r\n          this.form = HFform;\r\n          console.log(this.form);\r\n        }, err =>{\r\n          throw new Error('Error Sending the information about the spinner');\r\n        });\r\n      this.HeaderFooterForm.reset();\r\n    }, err => {\r\n      throw new Error('Error deleting the information of the previous spineer');\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"row bgColor\">\r\n    \r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n\r\n    <div class=\"container col-12 col-lg-10\">\r\n        <div class=\"title\">\r\n            <h2>Insert Custom Script</h2>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-10 mr-auto\">\r\n                <form [formGroup]=\"HeaderFooterForm\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"header\">HEADER:</label>\r\n                        <textarea formControlName=\"header\" class=\"form-control\" id=\"header\" name=\"header\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"footer\">Footer:</label>\r\n                        <textarea formControlName=\"footer\" class=\"form-control\" id=\"footer\" name=\"footer\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"title\">Page title:</label>\r\n                        <input formControlName=\"pageTitle\" type=\"text\" class=\"form-control\" id=\"title\" name=\"title\">  \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"description\">Page description:</label>\r\n                        <textarea formControlName=\"pageDescription\" class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\"></textarea>    \r\n                    </div>\r\n    \r\n                    <div class=\"mb-3\">\r\n                        <label for=\"favicon\">Favicon:</label>\r\n                        <input formControlName=\"favicon\" type=\"file\" (change)=\"processFile($event)\"> \r\n                        <div class=\"col-3\" id=\"FileUploadMessageBox\" *ngIf=\"selectedFile\">\r\n                            <div *ngIf=\"SuccessfullyUpload\" class=\"alert alert-success d-flex justify-content-center\"> <span>&#10004;</span></div>\r\n                            <div *ngIf=\"UnsuccessfullyUpload\" class=\"alert alert-danger d-flex justify-content-center\"> <span>&#x2716;</span></div>\r\n                        </div>   \r\n                    </div>\r\n    \r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <button class=\"btn btn-info\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    \r\n    </div>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder,FormArray, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { SpinnerCustomizerControllerService } from '../services/spinner-customizer-controller.service';\r\nimport { ImageService } from '../services/image.service';\r\nimport { CenterImageService } from '../services/center-image.service';\r\nimport { formSpinnerControl } from '../shared/form-spinner-controller';\r\nimport { ImageSnippet } from '../shared/ImageSnippet';\r\n\r\n@Component({\r\n  selector: 'app-customize-spinner',\r\n  templateUrl: './customize-spinner.component.html',\r\n  styleUrls: ['./customize-spinner.component.scss']\r\n})\r\nexport class CustomizeSpinnerComponent implements OnInit {\r\n\r\n  //Collapse menu\r\n  public isMenuCollapsed = true;\r\n\r\n  // For number of field dropdown\r\n  items: any[] = [];\r\n\r\n  spinnerForm: FormGroup;\r\n  submitPressed = false;\r\n\r\n  // For imageUpload / Text Field\r\n  itIsImageFile: boolean[] = [false];\r\n  itIsTextField: boolean[] = [false];\r\n  // For imageUpload / Text Field\r\n\r\n  // For results dropdown\r\n  itIsTextPopUp: boolean[] = [false];\r\n  itIsEmailPopUp: boolean[] = [false];\r\n  // For results dropdown\r\n\r\n  // Form validations:\r\n  //controllerForm: FormGroup;\r\n  errMess: string;\r\n\r\n  // For image Upload\r\n  selectedFile: ImageSnippet;\r\n  StringOfImageUpload: UploadFile[] = [];\r\n  SuccessfullyUpload: boolean[] = [];\r\n  UnsuccessfullyUpload: boolean[] = [];\r\n\r\n  //For percentage 100%\r\n  totalPercentage: any[] = [];\r\n  percentageSum: number;\r\n  StringOfSpinnerCenter: String;\r\n  SuccessSpinnerCenter: boolean;\r\n  UnsuccessSpinnerCenter: boolean;\r\n  CenterImageForm: FormGroup;\r\n  selectedCenterFile: ImageSnippet;\r\n  centerCopy: any;\r\n  centerform: any;\r\n\r\n  constructor(\r\n    public formBuilder:FormBuilder,// For number of field dropdown\r\n    private spinnerService: SpinnerCustomizerControllerService,// Form validations\r\n    private imageService: ImageService,\r\n    private centerImageService: CenterImageService\r\n     ) {       \r\n    // Setting Form Array\r\n    this.spinnerForm = this.formBuilder.group({\r\n\t\t\tspinnerArray: this.formBuilder.array(\r\n\t\t\t\t[],\r\n\t\t\t\t[Validators.required])\r\n    });\r\n    \r\n    this.createFormFieldForCenterSpinnerImage();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    // Sets default 6 boxes\r\n    for (let i = 0; i < 6; i++) {\r\n      this.addControl(i);\r\n    }\r\n    // For imageUpload / Text Field\r\n    let i = 0;\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsImageFile[i] = true;\r\n    }\r\n    // For imageUpload / Text Field\r\n\r\n    // For number of field dropdown\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsTextPopUp[i] = true;\r\n    }\r\n    // For number of field dropdown\r\n\r\n  }\r\n\r\n \r\n\r\n\tcreateSpFormGroup() {\r\n\t\treturn this.formBuilder.group({\r\n      isItImage: [true, [Validators.required]],\r\n      file: [''],\r\n      textFieldOne:[''],\r\n      percentage: ['', [Validators.required, Validators.pattern(/^[1-9]\\d*$/)]],\r\n      isItEmail: [true, [Validators.required]],\r\n      textPopUp: [''],\r\n      emails: [''],\r\n      color: ['', [Validators.required]],\r\n\t\t})\r\n  }\r\n\r\n  createFormFieldForCenterSpinnerImage() {\r\n    this.CenterImageForm = this.formBuilder.group({\r\n      centerImage: ['']\r\n    });\r\n  }\r\n\r\n  submitCenterImage() {\r\n\r\n  }\r\n\r\n   //Image Upload\r\n  private onSuccess(index, path) {\r\n    this.StringOfImageUpload.push(new UploadFile(index, path));\r\n    this.SuccessfullyUpload[index] = true;\r\n    this.UnsuccessfullyUpload[index] = false; \r\n  }\r\n\r\n  private onError(index) {\r\n    this.UnsuccessfullyUpload[index] = true; \r\n    this.SuccessfullyUpload[index] = false;\r\n  }\r\n\r\n\r\n  processFile(image: any, index) {\r\n      let files = image.srcElement.files;\r\n      let file: File = files[0];\r\n      let reader = new FileReader();\r\n      reader.addEventListener('load', (event: any) => {\r\n        this.selectedFile = new ImageSnippet(event.target.result, file);\r\n        this.imageService.uploadImage(this.selectedFile.file)\r\n          .subscribe((res) => {\r\n            this.onSuccess(index, res.path);\r\n          },\r\n          (err) => {\r\n            this.onError(index)\r\n            throw new Error(err);\r\n          });\r\n      });\r\n      reader.readAsDataURL(file);\r\n  }\r\n\r\n\r\n  //Center spinner image\r\n\r\n  private onSuccessCenter(path) {\r\n    this.StringOfSpinnerCenter = path;\r\n    this.SuccessSpinnerCenter = true;\r\n    this.UnsuccessSpinnerCenter = false; \r\n  }\r\n\r\n  private onErrorCenter() {\r\n    this.UnsuccessSpinnerCenter = true; \r\n    this.SuccessSpinnerCenter = false;\r\n  }\r\n\r\n  ProcessCenterImage(image: any) {\r\n    let files = image.srcElement.files;\r\n    let file: File = files[0];\r\n    let reader = new FileReader();\r\n    reader.addEventListener('load', (event: any) => {\r\n      this.selectedCenterFile = new ImageSnippet(event.target.result, file);\r\n      this.imageService.uploadImage(this.selectedCenterFile.file)\r\n        .subscribe((res) => {\r\n          this.onSuccessCenter(res.path);\r\n        },\r\n        (err) => {\r\n          this.onErrorCenter()\r\n          throw new Error(err);\r\n        });\r\n    });\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  /////\r\n  \r\n  get spinnerArray(): FormArray {\r\n\t\tif ( this.spinnerForm) {\r\n      return this.spinnerForm.get('spinnerArray') as FormArray;\r\n    }\r\n\t}\r\n  // For number of field dropdown\r\n  onChange(i) {\r\n    this.items.length = 0;   // eliminates defalut setting before adding other\r\n    this.spinnerForm.reset();\r\n    while(this.spinnerArray.length > 0) {\r\n      this.items.pop();\r\n      this.deleteSpinnerField(0);\r\n    }\r\n    while(i > 0) {\r\n      this.addControl(i);\r\n      i--;\r\n    }\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsImageFile[i] = true;\r\n    }\r\n    for (i=0; i<=this.items.length; i++) {\r\n      this.itIsTextPopUp[i] = true;\r\n    }\r\n  }\r\n  addControl(i) {\r\n    this.items.push({id: i.toString()})\r\n\t\tlet fg = this.createSpFormGroup();\r\n\t\tif(this.spinnerArray) {\r\n      this.spinnerArray.push(fg);\r\n    }\r\n  }\r\n\r\n  deleteSpinnerField(idx: number) {\r\n\t\tthis.spinnerArray.removeAt(idx);\r\n  }\r\n\r\n  deleteImage() {\r\n    this.centerImageService.deleteImageCenter()\r\n      .subscribe(() => {\r\n        \r\n      }, err => {\r\n        throw new Error('Error deleting the information of the previous spineer');\r\n      });\r\n  }\r\n  \r\n  // For number of field dropdown\r\n\r\n  //For image text selection\r\n  onChangeImage(option, i) {\r\n      if ( option === \"0: true\" ) {\r\n        this.itIsImageFile[i] = true;\r\n        this.itIsTextField[i] = false;\r\n        \r\n      }\r\n      else if( option === \"1: false\") {\r\n        this.itIsImageFile[i] = false;\r\n        this.itIsTextField[i] = true;\r\n      }\r\n  }\r\n  //For image text selection\r\n\r\n  // For number of field dropdown\r\n  onChangeResult(option, i) {\r\n    if ( option === 'text' ) {\r\n      this.itIsTextPopUp[i] = true;\r\n      this.itIsEmailPopUp[i] = false;\r\n    }\r\n    else if( option === 'email' ) {\r\n      this.itIsTextPopUp[i] = false;\r\n      this.itIsEmailPopUp[i] = true;\r\n    }\r\n}\r\n  // For number of field dropdown\r\n\r\n  onSubmit() {\r\n    let spinner: Array<formSpinnerControl> = [];\r\n    this.submitPressed = true;\r\n    \r\n    // if a field outside the array is added, change this to this.spinnerForm.value\r\n    if (this.spinnerForm.status === \"VALID\") {\r\n      let counter = 0;\r\n  \r\n      this.spinnerArray.value.forEach(element => {\r\n        let field = new formSpinnerControl(\r\n          element.isItImage,\r\n          element.image,\r\n          element.textFieldOne,\r\n          element.percentage,\r\n          element.isItEmail,\r\n          element.textPopUp,\r\n          element.email,\r\n          element.color\r\n        )\r\n\r\n        this.totalPercentage[counter] = element.percentage;\r\n\r\n        this.StringOfImageUpload.forEach((file)=>{\r\n          if(file.index == counter){\r\n            field.image = file.image;\r\n          } \r\n        })\r\n        spinner.push(field);\r\n\r\n        counter++;\r\n      });\r\n\r\n      this.percentageSum = this.totalPercentage.reduce(function(a, b){\r\n        return a + b;\r\n      }, 0);\r\n\r\n      console.log(this.percentageSum)\r\n    }\r\n\r\n    if (this.percentageSum === 100) {\r\n      this.spinnerService.deleteSpinner().subscribe(() => {\r\n        this.spinnerService.sendSpinner(spinner).subscribe((res) => {\r\n          this.spinnerForm.reset();\r\n          this.StringOfImageUpload = []; // Resets the StringOfImageUpload array\r\n        }, err =>{\r\n          throw new Error('Error Sending the information about the spinner');\r\n        });\r\n      }, err => {\r\n        throw new Error('Error deleting the information of the previous spineer');\r\n      });\r\n    } else {\r\n      throw new Error('Error Percentage must add up 100%');\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  onSubmitCenterImage() {\r\n    this.centerImageService.deleteImageCenter()\r\n      .subscribe(() => {\r\n        this.centerCopy = this.CenterImageForm.value;\r\n        this.centerCopy.centerImage = this.StringOfSpinnerCenter.replace(/\\\\/g, \"/\");\r\n        console.log(this.centerCopy);\r\n        this.centerImageService.sendImageCenter(this.centerCopy)\r\n        .subscribe(HFform => {\r\n          this.centerform = HFform;\r\n          console.log(this.centerform);\r\n        }, err =>{\r\n          throw new Error('Error Sending the information about the spinner');\r\n        });\r\n      this.CenterImageForm.reset();\r\n      }, err => {\r\n        throw new Error('Error deleting the information of the previous spineer');\r\n      });\r\n  }\r\n\r\n}\r\n\r\nexport class UploadFile {\r\n  index: number;\r\n  image: any;\r\n\r\n  constructor(idx, fil){\r\n    this.index = idx;\r\n    this.image = fil;\r\n  }\r\n}\r\n","<div class=\"row bgColor\">\r\n\r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n    \r\n    <div class=\"container menu1 col-12 col-lg-10\">\r\n    \r\n        <h2>Customize the spinner</h2>\r\n    \r\n        <div class=\"row my-5\">\r\n            <div class=\"col-12\">\r\n      \r\n                <div id=\"settingNumber\">\r\n                    <div>\r\n                        <label class=\"mr-3\" for=\"numberOptions\">Number of fields on the spinner </label>\r\n                        <select matNativeControl name=\"numberOptions\" required (change)=\"onChange($event.target.value)\">\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"6\" selected>6</option>\r\n                            <option value=\"7\">7</option>\r\n                            <option value=\"8\">8</option>\r\n                            <option value=\"9\">9</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"11\">11</option>\r\n                            <option value=\"12\">12</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-12\">\r\n            <form [formGroup]=\"spinnerForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div>\r\n\r\n                    <div class=\"table-responsive\">\r\n                        <table class=\"table table-borderless\">\r\n                            <div formArrayName=\"spinnerArray\">\r\n                                <tr>\r\n                                    <th><label for=\"ImageOption\">Input type</label></th>\r\n                                    <th><label for=\"\">File / Text</label></th>\r\n                                    <th><label for=\"\">Percentage</label></th>\r\n                                    <th><label for=\"\">Result</label></th>\r\n                                    <th><label for=\"\">Text / Email</label></th>\r\n                                    <th><label for=\"\">bg Color</label></th>\r\n                                </tr>\r\n                                <tr *ngFor=\"let spinnerfield of spinnerArray.controls; let i = index\" [formGroupName]=\"i\">\r\n\r\n                                    <td>\r\n                                        <select formControlName=\"isItImage\" required (change)=\"onChangeImage($event.target.value, i)\">\r\n                                            <option [ngValue]=\"true\" selected>Image</option>\r\n                                            <option [ngValue]=\"false\">Text</option>\r\n                                        </select>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsImageFile[i]\">\r\n                                        <div id=\"ImageUploadBox\">\r\n                                            <div id=\"FileUploadBox\">\r\n                                                <input #imageInput\r\n                                                formControlName=\"file\"\r\n                                                type=\"file\" \r\n                                                accept=\"image/*\"\r\n                                                name=\"imageFile\"\r\n                                                (change)=\"processFile($event, i)\">\r\n        \r\n                                            </div>\r\n    \r\n                                            <div id=\"FileUploadMessageBox\" *ngIf=\"selectedFile\">\r\n                                                <div *ngIf=\"SuccessfullyUpload[i]\" class=\"alert alert-success d-flex justify-content-center\"> <span>&#10004;</span></div>\r\n                                                <div *ngIf=\"UnsuccessfullyUpload[i]\" class=\"alert alert-danger d-flex justify-content-center\"> <span>&#x2716;</span></div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsTextField[i]\">\r\n                                        <input formControlName=\"textFieldOne\" type=\"text\" name=\"textField\">\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <input formControlName=\"percentage\" type=\"number\" name=\"textField\" [class.invalid]=\"spinnerfield.controls.percentage.hasError('required')  && submitPressed\">\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <select formControlName=\"isItEmail\" name=\"resultOption\" required (change)=\"onChangeResult($event.target.value, i)\">\r\n                                            <option [ngValue]=\"false\" selected>Text Popup</option>\r\n                                            <option [ngValue]=\"true\">Email Popup</option>\r\n                                        </select>\r\n                                    </td>\r\n\r\n                                    <td *ngIf=\"itIsTextPopUp[i]\">\r\n                                        <input formControlName=\"textPopUp\"  type=\"text\" name=\"imageFile\">\r\n                                    </td>\r\n                \r\n                                    <td *ngIf=\"itIsEmailPopUp[i]\">\r\n                                        <input formControlName=\"emails\" type=\"email\" name=\"textField\">\r\n                                    </td>\r\n\r\n                                    <td class=\"col-2\">\r\n                                        <input formControlName=\"color\" type=\"color\" [class.invalid]=\"spinnerfield.controls.color.hasError('required')  && submitPressed\">\r\n                                    </td>\r\n\r\n                                </tr>\r\n\r\n                            </div>\r\n\r\n                        </table>\r\n                    </div>\r\n\r\n                    \r\n    \r\n                    <button type=\"submit\" class=\"btn btn-success ml-auto\" \r\n                    >Submit</button>\r\n                    \r\n                </div>\r\n            </form>\r\n\r\n            <h3 class=\"mt-3\">Image for middle of spinner</h3>\r\n\r\n            <form [formGroup]=\"CenterImageForm\" (ngSubmit)=\"onSubmitCenterImage()\">\r\n                <input class=\"mr-5\" formControlName=\"centerImage\" type=\"file\" (change)=\"ProcessCenterImage($event)\">\r\n                <button class=\"ml-5\" type=\"submit\" class=\"btn btn-success ml-auto\" \r\n                    >Submit</button>\r\n            </form>\r\n            <button class=\"ml-5\" class=\"btn btn-danger ml-auto\" (click)=\"deleteImage()\" \r\n            >Delete image</button>\r\n\r\n        </div>\r\n    \r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { EmailsService } from '../services/emails.service';\r\n\r\n@Component({\r\n  selector: 'app-email-list',\r\n  templateUrl: './email-list.component.html',\r\n  styleUrls: ['./email-list.component.scss']\r\n})\r\nexport class EmailListComponent implements OnInit {\r\n\r\n  public isMenuCollapsed = true;\r\n\r\n  emails: any;\r\n\r\n  constructor( private emailService: EmailsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getEmails();\r\n  }\r\n\r\n  getEmails(): void {\r\n    this.emailService.getEmails()\r\n      .subscribe( emails => {\r\n        this.emails = emails;\r\n        console.log(this.emails);\r\n      })\r\n  }\r\n\r\n}\r\n","<div class=\"row bgColor\">\r\n\r\n    <div class=\"col-12 col-lg-2 navbar navbar-expand-lg p-0 bg-dark\">\r\n        <button class=\"navbar-toggler pl-4\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\r\n            <span class=\"btn btn-secondary\">&#9776;</span> \r\n        </button>\r\n        <app-navbar class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [ngbCollapse]=\"isMenuCollapsed\"></app-navbar>\r\n    </div>\r\n\r\n    <div class=\"container col-12 col-lg-10\">\r\n        <div id=\"title\">\r\n            <h2>List of collected Emails</h2>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-12 d-flex justify-content-end mb-5\">\r\n                <button class=\"btn btn-info\">Export results csv/excel</button>\r\n            </div>\r\n            <div class=\"table-responsive\" *ngIf=\"emails\">\r\n                <table class=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Email Address</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Date Spin</th>\r\n                            <th>Result</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let email of emails\">\r\n                            <td>{{email.emailAddress}}</td>\r\n                            <td>{{email.firstName}}</td>\r\n                            <td>{{email.lastName}}</td>\r\n                            <td>{{email.updatedAt | date}}</td>\r\n                            <td>{{email.result}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n    \r\n    \r\n                </table>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LoginService, userLogin } from '../services/login.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  LoginForm: FormGroup;\r\n  LoginError: boolean;\r\n\r\n  constructor( \r\n    private fb: FormBuilder,\r\n    private loginservice: LoginService,\r\n    private router: Router) {\r\n      this.createForm();\r\n     }\r\n\r\n  ngOnInit(): void {\r\n    this.LoginError = false;\r\n  }\r\n\r\n  createForm() {\r\n    this.LoginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.LoginForm.status === \"VALID\"){\r\n      const user = new userLogin(this.LoginForm.controls.username.value, \r\n                                this.LoginForm.controls.password.value)\r\n      \r\n      this.loginservice.Login(user).subscribe((resp: any) => {\r\n         if(resp.success === true) {\r\n           this.LoginError = false;\r\n           localStorage.setItem(\"userToken\", resp.token);\r\n           this.router.navigate(['/customize-spinner']);\r\n         }\r\n      }, err => {\r\n        this.LoginError = true;\r\n        \r\n      })\r\n    }\r\n  }\r\n}\r\n","<div class=\"container\">\r\n\r\n\r\n    <div class=\"align-middle\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"title d-flex justify-content-center\">\r\n                    <h1>LOGIN</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"formContent\">\r\n                    <form [formGroup]=\"LoginForm\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 d-flex justify-content-center mb-2\">\r\n                                <div class=\"field\">\r\n                                    <input formControlName=\"username\" type=\"text\" placeholder=\"Username\" required>\r\n                                </div>\r\n                            </div>\r\n    \r\n                            <div class=\"col-12 d-flex justify-content-center mb-2\">\r\n                                <div class=\"field\">\r\n                                    <input formControlName=\"password\" type=\"password\" placeholder=\"Enter your password\" required>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"col-12 d-flex justify-content-center\">\r\n                                <div class=\"field d-flex justify-content-end\">\r\n                                    <button class=\"btn btn-sm btn-danger\">Login</button>\r\n                                </div>\r\n                            </div>\r\n    \r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div class=\"errorMessage\" *ngIf=\"LoginError\">\r\n                    <p>Wrong Username or Password</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    \r\n\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.scss']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  logout(){\r\n    localStorage.clear();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","<div class=\"container align-items-start pl-4\">\r\n\r\n  <div>\r\n    <div class=\"image img-fluid\">\r\n      <img src=\"https://dam.ngenespanol.com/wp-content/uploads/2019/06/arbol-mas-alto-del-mundo-770x395.png\" alt=\"Fixed Photo\">\r\n  </div>\r\n  <div class=\"mt-3\">\r\n      <ul class=\"nav flex-column\">\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/spinner\">SPINNER</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/customize-spinner\">CUSTOMIZE SPINNER</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/email-list\">EMAIL LIST</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/custom-script\">CUSTOM SCRIPIT</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">SUPPORT</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"#\">REQUEST FEATURE</a>\r\n          </li>\r\n            \r\n        </ul>\r\n  </div>\r\n    <button class=\"btn btn-danger ml-auto\" (click)=\"logout()\">Logout</button>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CenterImageService {\r\n\r\n  URL_API = \"/api/v1/centerImage\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService\r\n  ) { }\r\n\r\n  getImageCenter(): Observable<any> {\r\n    return this.http.get<any>(this.URL_API)\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n\r\n  sendImageCenter(Form:any): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n    return this.http.post<any>(this.URL_API, Form)\r\n      .pipe(catchError(this.processHTTPMsgService.handleError));\r\n  }; \r\n\r\n  deleteImageCenter() {\r\n    return this.http.delete(this.URL_API);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomScriptService {\r\n\r\n\r\n\r\n  URL_API = \"/api/v1/headerFooter\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n  sendHeaderFooter(Form:any): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n    return this.http.post<any>(this.URL_API, Form)\r\n      .pipe(catchError(this.processHTTPMsgService.handleError));\r\n  }; \r\n\r\n  deleteHeaderFooter() {\r\n    return this.http.delete(this.URL_API);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmailsService {\r\n\r\n  URL_API = \"/api/v1/results\";\r\n\r\n  TOKEN = localStorage.getItem('userToken');\r\n  \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Authorization': `Bearer ${this.TOKEN}` })\r\n  };\r\n\r\n  \r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n  getEmails(): Observable<any> {\r\n    return this.http.get<any>(this.URL_API, this.httpOptions) //Check and test later\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n\r\n  sendEmails(Form:any): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n    return this.http.post<any>(this.URL_API, Form)\r\n      .pipe(catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ){}\r\n\r\n  canActivate(): boolean {\r\n    if( localStorage.getItem('userToken') ){\r\n      return true\r\n    } else {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeaderFooterService {\r\n\r\n  URL_API_HEADER = \"/api/v1/headerFooter\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n    getHeaderFooter(): Observable<any> {\r\n      return this.http.get<any>(this.URL_API_HEADER)\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n\r\n  URL_API = \"/api/v1/imageUpload\";\r\n\r\n  TOKEN = localStorage.getItem('userToken');\r\n  \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Authorization': `Bearer ${this.TOKEN}` })\r\n  };\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public uploadImage(image: File): Observable<any> {\r\n    const imageF = new FormData();\r\n\r\n    imageF.append('imageFile', image);\r\n\r\n    return this.http.post(this.URL_API, imageF, this.httpOptions);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  URL_API = \"/users/login\";\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  Login(user: userLogin){\r\n    return this.http.post(this.URL_API, user);\r\n  }\r\n}\r\n\r\n\r\nexport class userLogin{\r\n\r\n  username: string;\r\n  password: string;\r\n\r\n  constructor(user, pass){\r\n    this.username = user;\r\n    this.password = pass;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProcessHTTPMsgService {\r\n\r\n  constructor() { }\r\n\r\n  public handleError(error: HttpErrorResponse | any) {\r\n    let errMsg: string;\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      errMsg = error.error.message;\r\n    } else {\r\n      errMsg = `${error.status} - ${error.statusText || ''} ${error.error}`;\r\n    }\r\n\r\n    return throwError(errMsg);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { formSpinnerControl } from '../shared/form-spinner-controller';\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerCustomizerControllerService {\r\n\r\n  TOKEN = localStorage.getItem('userToken');\r\n  \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Authorization': `Bearer ${this.TOKEN}` })\r\n  };\r\n\r\n  URL_API = \"/api/v1/spinner\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService) { }\r\n\r\n  sendSpinner( spinnerArray: Array <formSpinnerControl>) {\r\n    return this.http.post(this.URL_API, spinnerArray, this.httpOptions);\r\n  }\r\n\r\n  deleteSpinner() {\r\n    return this.http.delete(this.URL_API, this.httpOptions);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ProcessHTTPMsgService } from './process-httpmsg.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerService {\r\n\r\n  URL_API_SPINNER = \"/api/v1/spinner\";\r\n  URL_API_HEADER = \"/api/v1/headerFooter\";\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private processHTTPMsgService: ProcessHTTPMsgService\r\n  ) { }\r\n\r\n  getSpinner(): Observable<any> {\r\n    return this.http.get<any>(this.URL_API_SPINNER) //Check and test later\r\n      .pipe(map((data:any) => data),\r\n      catchError(this.processHTTPMsgService.handleError));\r\n  }\r\n\r\n  //Inverter color function\r\n  invertColor(hex): any {\r\n    if (hex.indexOf('#') === 0) {\r\n      hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n    if (hex.length !== 6) {\r\n      throw new Error('Invalid HEX color.');\r\n    }\r\n    // invert color components\r\n    var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\r\n        g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\r\n        b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);\r\n    // pad each with zeros and return\r\n    function padZero(str) {\r\n      let len = 2;\r\n      var zeros = new Array(len).join('0');\r\n      return (zeros + str).slice(-len);\r\n    }\r\n    return '#' + padZero(r) + padZero(g) + padZero(b);\r\n  }\r\n  ///////////////////////////\r\n\r\n}\r\n","export class ImageSnippet {\r\n    pending: boolean = false;\r\n    status: string = 'init';\r\n    constructor(public src: string, public file: File) {}\r\n}","export class formSpinnerControl {\r\n    isItImage: boolean;\r\n    image: any;\r\n    textFieldOne: string;\r\n    percentage: number;\r\n    isItEmail: boolean;\r\n    textPopUp: string;\r\n    email: string;\r\n    bgColor: string;\r\n\r\n    constructor(isImage, image, textOne, percentage, isEmail, textPopUp, email, color){\r\n        this.isItImage = isImage;\r\n        this.image = image;\r\n        this.textFieldOne = textOne;\r\n        this.percentage = percentage;\r\n        this.isItEmail = isEmail;\r\n        this.textPopUp = textPopUp;\r\n        this.email = email;\r\n        this.bgColor = color;\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, QueryList, ViewChildren, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {NgbModal, ModalDismissReasons} from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { SpinnerService } from '../services/spinner.service';\r\nimport { HeaderFooterService } from '../services/header-footer.service';\r\nimport { EmailsService } from '../services/emails.service';\r\nimport { CenterImageService } from '../services/center-image.service';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n\r\n  API_IMAGE_URL = '/api/v1/imageUpload/';\r\n  SpinnerFields: any;\r\n  HeaderFooter: any;\r\n  bgColorStyle: any[] = ['']; // Backgorund color\r\n  fontColor: any[] = ['']; // Font Color\r\n\r\n  fieldStyleNth: any[] = [''] //Individual field style\r\n  holder: any[] = ['']\r\n\r\n  state: string = 'default';\r\n\r\n  //Animations\r\n  clicks: number = 0;\r\n  newDegree: number;\r\n  extraDegree: number; \r\n  totalDegree: number = 0;\r\n  spiningRotate: any;\r\n\r\n  @ViewChildren('wheelSec') wheelSecs: QueryList<any>;\r\n  @ViewChild('txt') Text;\r\n  @ViewChild('spin') spin;\r\n\r\n  spinMovemente: any;\r\n\r\n  //Results\r\n  angle: number;\r\n  initialDegreesStart: any[] = [''];\r\n  initialDegreesEnd: any[] = [''];\r\n  degreesRotated: number = 0;\r\n  resultingField: number = 0;\r\n  FinalResult: any;\r\n\r\n  sendEmailForm: FormGroup;\r\n  form: any;\r\n  formCopy: any;\r\n  errMess: string;\r\n  ///\r\n\r\n  //Center image\r\n  centerImage: any;\r\n\r\n  /// Modal results\r\n  closeResult = ''; \r\n  @ViewChild('ResultEmail') ResultEmail;\r\n  @ViewChild('ResultText') ResultText;\r\n\r\n  constructor( \r\n    private spinnerService: SpinnerService,\r\n    private headerFooterService: HeaderFooterService,\r\n    private emailSevice: EmailsService,\r\n    private modalService: NgbModal,\r\n    private centerImageService: CenterImageService,\r\n    private fb: FormBuilder ) { \r\n      this.createForm();\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    this.getHeaderFooter();\r\n    this.getSpinner();\r\n    this.getImageCenter();\r\n  }\r\n\r\n  getSpinner(): void {\r\n    this.spinnerService.getSpinner()\r\n      .subscribe( spinnerFields => {\r\n        this.SpinnerFields = spinnerFields;\r\n        this.angle = 360/this.SpinnerFields.length;\r\n        for(let i=0; i<this.SpinnerFields.length; i++) { //Substitute backslashes for slashes\r\n          this.SpinnerFields[i].image = this.SpinnerFields[i].image.replace(/\\\\/g, \"/\");\r\n          this.SpinnerFields[i].image = this.API_IMAGE_URL + this.SpinnerFields[i].image.slice(14);\r\n          this.bgColorStyle[i] = this.SpinnerFields[i].bgColor; // Backgorund color\r\n          this.fontColor[i] = this.spinnerService.invertColor(this.bgColorStyle[i]); //Font Color\r\n          this.holder[i] = {'transform': 'rotate(' + this.angle*(i) + 'deg)',\r\n                            '-webkit-transform': 'rotate(' + this.angle*(i) + 'deg)',\r\n                            '-moz-transform': 'rotate(' + this.angle*(i) + 'deg)',\r\n                            '-o-transform': 'rotate(' + this.angle*(i) + 'deg)',\r\n                            '-ms-transform': 'rotate(' + this.angle*(i) + 'deg)',}\r\n\r\n          this.fieldStyleNth[i] = {'transform': 'rotate(' + this.angle + 'deg)',\r\n                                  '-webkit-transform': 'rotate(' + this.angle + 'deg)',\r\n                                  '-moz-transform': 'rotate(' + this.angle + 'deg)',\r\n                                  '-o-transform': 'rotate(' + this.angle + 'deg)',\r\n                                  '-ms-transform': 'rotate(' + this.angle + 'deg)',\r\n                                  'background-color': this.bgColorStyle[i],\r\n                                  'color': this.fontColor[i]\t}\r\n\r\n          this.initialDegreesStart[i] = this.angle*i\r\n          this.initialDegreesEnd[i] = this.initialDegreesStart[i] + this.angle;\r\n        }\r\n      })\r\n  }\r\n\r\n  getHeaderFooter() {\r\n    this.headerFooterService.getHeaderFooter()\r\n      .subscribe( headerFooter => {\r\n        this.HeaderFooter = headerFooter[0];\r\n      });\r\n  }\r\n\r\n  getImageCenter() {\r\n    this.centerImageService.getImageCenter()\r\n      .subscribe(centerImage => {\r\n        this.centerImage = centerImage[0];\r\n        this.centerImage.centerImage = this.API_IMAGE_URL + this.centerImage.centerImage.slice(14);\r\n        console.log(centerImage);\r\n      });\r\n  }\r\n\r\n  rotate() {\r\n    this.getSpinner();\r\n    let degreeSpinn = 360*8;\r\n    this.clicks = ++this.clicks; ////\r\n    this.newDegree = degreeSpinn * this.clicks;  ////\r\n\r\n    this.CalculateDegreesRotated()\r\n\r\n    this.totalDegree = this.newDegree + this.extraDegree;\r\n    \r\n    this.spining();\r\n\r\n    this.ExposingResult()\r\n\r\n  }\r\n\r\n  spining() {\r\n    this.spiningRotate = { 'transform': 'rotate(-' + this.totalDegree + 'deg)'};\r\n  }\r\n\r\n\r\n  ExposingResult() {\r\n\r\n    console.log(this.SpinnerFields)\r\n\r\n    if (this.SpinnerFields[this.resultingField].isItEmail === true) {\r\n      setTimeout( () => {\r\n        this.open(this.ResultEmail)\r\n      }, 6500);\r\n  \r\n    }\r\n    else if (this.SpinnerFields[this.resultingField].isItEmail === false) {\r\n      setTimeout( () => {\r\n        this.open(this.ResultText)\r\n      }, 6500);  \r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.sendEmailForm = this.fb.group({\r\n      firstName: [''],\r\n      lastName: [''],\r\n      emailAddress: [''],\r\n      result: ['']\r\n    });\r\n\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formCopy = this.sendEmailForm.value;\r\n    this.formCopy.result = this.FinalResult.textPopUp;\r\n    console.log(this.formCopy);\r\n    this.emailSevice.sendEmails(this.formCopy)\r\n      .subscribe(emailForm => {\r\n        this.form = emailForm;\r\n        console.log(this.form);\r\n      }, err =>{\r\n        throw new Error('Error Sending the information about the spinner');\r\n      });\r\n    this.sendEmailForm.reset();\r\n\r\n  }\r\n\r\n  CalculateDegreesRotated() {\r\n    let DegreesArray = [];\r\n    let index, sum = 0\r\n    let random = Math.random();\r\n    let random2 = Math.random();\r\n\r\n    for( index = 0; index < this.SpinnerFields.length; index++) {\r\n      sum += this.SpinnerFields[index].percentage/100;\r\n      DegreesArray[index] = sum;\r\n    }\r\n\r\n    for ( index = 0; random < DegreesArray.length && random >= DegreesArray[index]; index++);\r\n\r\n    this.extraDegree = (this.initialDegreesEnd[index] - this.angle)\r\n      + Math.floor(random2 * (this.initialDegreesEnd[index] - (this.initialDegreesEnd[index] - this.angle)-1));\r\n  \r\n      this.resultingField = index;\r\n      console.log(index);\r\n\r\n      this.FinalResult = this.SpinnerFields[index]\r\n      console.log(this.FinalResult)\r\n    }\r\n\r\n\r\n    // Modal results\r\n    open(content) {\r\n      this.modalService.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {\r\n        this.closeResult = `Closed with: ${result}`;\r\n      }, (reason) => {\r\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\r\n      });\r\n    }\r\n\r\n    private getDismissReason(reason: any): string {\r\n      if (reason === ModalDismissReasons.ESC) {\r\n        return 'by pressing ESC';\r\n      } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\r\n        return 'by clicking on a backdrop';\r\n      } else {\r\n        return `with: ${reason}`;\r\n      }\r\n    }\r\n    ///////\r\n\r\n  }","\r\n<header *ngIf=\"HeaderFooter\">\r\n    <div [innerHTML]=\"HeaderFooter.header\"></div>\r\n</header>\r\n\r\n\r\n<div class=\"my-5 row\" *ngIf=\"HeaderFooter\">\r\n    <div class=\"col-12 d-flex justify-content-center\" id=\"title\">\r\n        <h2>{{HeaderFooter.pageTitle}}</h2>\r\n    </div>\r\n\r\n    <div class=\"col-12 d-flex justify-content-center mt-3\" id=\"description\">\r\n        <p>{{HeaderFooter.pageDescription}}</p>\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n<div id=\"wrapper\">\r\n            \r\n    <div *ngIf=\"SpinnerFields\" id=\"wheel\">\r\n\r\n        <div id=\"inner-wheel\" [style]=\"spiningRotate\">\r\n            <div *ngFor=\"let field of SpinnerFields; let i = index\">\r\n                <div #wheelSec>\r\n                    <div [style]=\"holder[i]\" class=\"hold\" *ngIf=\"field.isItImage\">\r\n                        <div  class=\"sec\" id=\"wheelSec\" [style]=\"fieldStyleNth[i]\">\r\n                            <div> <span> <img [src]=\"field.image\" alt=\"\">\r\n                                {{field.image}} </span></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div [style]=\"holder[i]\" class=\"hold\" *ngIf=\"!field.isItImage\">\r\n                        <div class=\"sec\" [style]=\"fieldStyleNth[i]\">\r\n                            <div><span>{{field.textFieldOne}}</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>       \r\n           \r\n\r\n        </div>\r\n        <div id=\"spin\" (click)=\"rotate()\" #spin [style]=\"spinMovemente\">\r\n            <div id=\"inner-spin\">\r\n              <div *ngIf=\"centerImage\">\r\n<<<<<<< HEAD\r\n                <img #Image src=\"{{centerImage.centerImage}}\" alt=\"CenterImage\">\r\n=======\r\n                <img src=\"{{centerImage.centerImage}}\">\r\n>>>>>>> 6be21e8745f81911319a594ee7b8941746555e75\r\n              </div>\r\n            </div>\r\n        </div>\r\n        \r\n        <div id=\"shine\"></div>\r\n        \r\n    </div>\r\n    \r\n    <div id=\"txt\" #txt></div>\r\n</div>\r\n  \r\n\r\n<footer *ngIf=\"HeaderFooter\">\r\n    <div [innerHTML]=\"HeaderFooter.footer\"></div>\r\n</footer>\r\n\r\n<ng-template #ResultEmail let-modal>\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"FinalResult\" class=\"modal-body\">\r\n        <h2>{{FinalResult.textPopUp}}</h2>\r\n        <form class=\"row\" [formGroup]=\"sendEmailForm\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"col-12 d-flex justify-content-center my-3\">\r\n            <input formControlName=\"firstName\" type=\"text\" placeholder=\"First Name\">\r\n          </div>\r\n\r\n          <div class=\"col-12 d-flex justify-content-center mb-3\">\r\n            <input formControlName=\"lastName\" type=\"text\" placeholder=\"Last Name\">\r\n          </div>\r\n\r\n          <div class=\"col-12 d-flex justify-content-center mb-3\">\r\n            <input formControlName=\"emailAddress\" type=\"email\"  placeholder=\"email\">\r\n          </div>\r\n          \r\n          <div class=\"modal-footer\">\r\n            <button class=\"btn btn-success\">Send</button>\r\n            <button class=\"btn btn-danger\"(click)=\"modal.close('Save click')\">Close</button>\r\n\r\n          </div>\r\n      </form>\r\n    </div>\r\n\r\n\r\n  </ng-template>\r\n\r\n  <ng-template #ResultText let-modal>\r\n    <div class=\"modal-header\">\r\n      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <div *ngIf=\"FinalResult\" class=\"modal-body\">\r\n      <h2>{{FinalResult.textPopUp}}</h2>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-success\" (click)=\"modal.close('Save click')\">Close</button>\r\n    </div>\r\n  </ng-template>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}